const Updatable = require('./updatable');

/**
 * Main class for Flowcord plugins
 * @property {Boolean} ready
 * @abstract
 */
class Plugin extends Updatable {
  constructor () {
    super(flowcord.pluginManager.pluginDir);
    this.ready = false;
  }

  // Getters
  get isInternal () {
    return this.entityID.startsWith('fc-');
  }

  get dependencies () {
    return this.manifest.dependencies;
  }

  get optionalDependencies () {
    return this.manifest.optionalDependencies;
  }

  get effectiveOptionalDependencies () {
    const deps = this.manifest.optionalDependencies;
    const disabled = powercord.settings.get('disabledPlugins', []);
    return deps.filter(d => powercord.pluginManager.get(d) !== void 0 && !disabled.includes(d));
  }

  get allDependencies () {
    return this.dependencies.concat(this.optionalDependencies);
  }

  get allEffectiveDependencies () {
    return this.dependencies.concat(this.effectiveOptionalDependencies);
  }

  get dependents () {
    const dependents = [ ...powercord.pluginManager.plugins.values() ].filter(p => p.manifest.dependencies.includes(this.entityID));
    return [ ...new Set(dependents.map(d => d.entityID).concat(...dependents.map(d => d.dependents))) ];
  }

  get color () {
    return '#4682b4';
  }

  // Console
  log (...data) {
    console.log(`%c[Powercord:Plugin:${this.constructor.name}]`, `color: ${this.color}`, ...data);
  }

  debug (...data) {
    console.debug(`%c[Powercord:Plugin:${this.constructor.name}]`, `color: ${this.color}`, ...data);
  }

  warn (...data) {
    console.warn(`%c[Powercord:Plugin:${this.constructor.name}]`, `color: ${this.color}`, ...data);
  }

  error (...data) {
    console.error(`%c[Powercord:Plugin:${this.constructor.name}]`, `color: ${this.color}`, ...data);
  }

  async _update(force = false) {
    const success = await super._update(force);
    if (success && this.ready) {
      await flowcord.pluginManager.remount(this.entityID);
    }

    return success;
  }

  async _load () {
    try {
      while (!this.allEffectiveDependencies.every(pluginName => powercord.pluginManager.get(pluginName).ready)) {
        await sleep(1);
      }

      if (typeof this.startPlugin === 'function') {
        await this.startPlugin();
      }

      this.log('Plugin loaded');
    } catch (e) {
      this.error('An error occurred during initialization!', e);
    } finally {
      this.ready = true;
    }
  }

  async _unload () {
    try {
      if (typeof this.pluginWillUnload === 'function') {
        await this.pluginWillUnload();
      }

      this.log('Plugin unloaded');
    } catch (e) {
      this.error('An error occurred during shutting down! It\'s heavily recommended reloading Discord to ensure there are no conflicts.', e);
    } finally {
      this.ready = false;
    }
  }
}

module.exports = Plugin;
